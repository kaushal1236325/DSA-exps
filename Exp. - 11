#include <stdio.h>
#include <stdlib.h>

#define MAX 10

int adj[MAX][MAX];     // Adjacency matrix
int visited[MAX];      // Visited array
int queue[MAX], front = -1, rear = -1;

// Enqueue
void enqueue(int v) {
    if (rear == MAX - 1) return;
    if (front == -1) front = 0;
    queue[++rear] = v;
}

// Dequeue
int dequeue() {
    if (front == -1 || front > rear) return -1;
    return queue[front++];
}

// BFS Traversal
void BFS(int start, int n) {
    for (int i = 0; i < n; i++) visited[i] = 0;

    printf("BFS Traversal: ");
    visited[start] = 1;
    enqueue(start);

    while (front <= rear) {
        int v = dequeue();
        printf("%d ", v);

        for (int i = 0; i < n; i++) {
            if (adj[v][i] && !visited[i]) {
                visited[i] = 1;
                enqueue(i);
            }
        }
    }
    printf("\n");
}

// DFS Traversal
void DFS(int v, int n) {
    visited[v] = 1;
    printf("%d ", v);

    for (int i = 0; i < n; i++) {
        if (adj[v][i] && !visited[i]) {
            DFS(i, n);
        }
    }
}

int main() {
    int n, edges, u, v, start;

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter number of edges: ");
    scanf("%d", &edges);

    // Initialize adjacency matrix
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            adj[i][j] = 0;

    // Input edges
    printf("Enter edges (u v):\n");
    for (int i = 0; i < edges; i++) {
        scanf("%d %d", &u, &v);
        adj[u][v] = 1; // Directed edge
    }

    printf("Enter starting vertex: ");
    scanf("%d", &start);

    // BFS
    BFS(start, n);

    // DFS
    for (int i = 0; i < n; i++) visited[i] = 0;
    printf("DFS Traversal: ");
    DFS(start, n);
    printf("\n");

    return 0;
}

Output:
Enter number of vertices: 5
Enter number of edges: 6
Enter edges (u v):
0 3
1 5
7 6
8 9
2 3
7 6
Enter starting vertex: 0
BFS Traversal: 0 3 
DFS Traversal: 0 3 
