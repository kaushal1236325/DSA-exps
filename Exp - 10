#include <stdio.h>
#include <stdlib.h>

// Node structure
struct Node {
    int data, height;
    struct Node* left;
    struct Node* right;
};

// Get height of node
int height(struct Node* N) {
    if (N == NULL) return 0;
    return N->height;
}

// Create new node
struct Node* createNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->left = node->right = NULL;
    node->height = 1;
    return node;
}

// Get maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Right rotate
struct Node* rightRotate(struct Node* y) {
    struct Node* x = y->left;
    struct Node* T2 = x->right;

    x->right = y;
    y->left = T2;

    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;

    return x;
}

// Left rotate
struct Node* leftRotate(struct Node* x) {
    struct Node* y = x->right;
    struct Node* T2 = y->left;

    y->left = x;
    x->right = T2;

    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;

    return y;
}

// Get balance factor
int getBalance(struct Node* N) {
    if (N == NULL) return 0;
    return height(N->left) - height(N->right);
}

// Insert node into AVL Tree
struct Node* insert(struct Node* node, int data) {
    // Normal BST insert
    if (node == NULL) return createNode(data);

    if (data < node->data)
        node->left = insert(node->left, data);
    else if (data > node->data)
        node->right = insert(node->right, data);
    else
        return node; // Duplicates not allowed

    // Update height
    node->height = 1 + max(height(node->left), height(node->right));

    // Get balance factor
    int balance = getBalance(node);

    // Balance cases
    if (balance > 1 && data < node->left->data)
        return rightRotate(node); // LL

    if (balance < -1 && data > node->right->data)
        return leftRotate(node); // RR

    if (balance > 1 && data > node->left->data) {
        node->left = leftRotate(node->left);
        return rightRotate(node); // LR
    }

    if (balance < -1 && data < node->right->data) {
        node->right = rightRotate(node->right);
        return leftRotate(node); // RL
    }

    return node;
}

// Inorder traversal
void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

int main() {
    struct Node* root = NULL;
    int choice, value;

    while (1) {
        printf("\n--- AVL Tree Menu ---\n");
        printf("1. Insert\n");
        printf("2. Inorder Traversal\n");
        printf("3. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to insert: ");
                scanf("%d", &value);
                root = insert(root, value);
                break;
            case 2:
                printf("Inorder Traversal: ");
                inorder(root);
                printf("\n");
                break;
            case 3:
                exit(0);
            default:
                printf("Invalid choice!\n");
        }
    }
    return 0;
}

Output:
--- AVL Tree Menu ---
1. Insert
2. Inorder Traversal
3. Exit
Enter choice: 1
Enter value to insert: 14

--- AVL Tree Menu ---
1. Insert
2. Inorder Traversal
3. Exit
Enter choice: 1
Enter value to insert: 28

--- AVL Tree Menu ---
1. Insert
2. Inorder Traversal
3. Exit
Enter choice: 1
Enter value to insert: 42

--- AVL Tree Menu ---
1. Insert
2. Inorder Traversal
3. Exit
Enter choice: 2
Inorder Traversal: 14 28 42
